AJAX 阿贾克斯

1. 什么是AJAX
    Asynchronous Javascript And Xml

    Asynchronous: 异步的
    Xml eXtensible Markup Lanuage
    可扩展的     标签    语言

    同步访问
        当客户端向服务器发送请求时，服务器的在处理过程中，浏览器只能等待，效率偏低
    异步访问
        当客户端向服务器发送请求时，服务器在处理过程中，客户端可以做其他的操作，
      不需要一直等待，效率偏高
    优点
        异步访问
        局部刷新
    使用场合
        搜索建议
        表单验证
        前后端完全分离

2. AJAX 的核心对象-异步对象（XMLHttpRequest）
    XMLHttpRequest   简称xhr
        称为异步对象： 代替浏览器向服务器发送请求并接收响应
        xhr 是由JS来提供的
    创建异步对象（xhr）
        主流的异步对象是 XMLHttpRequest 类型的，并且主流浏览器都支持（IE7+, Chrome, Safari, Opera）
      全部支持, 在IE低版本浏览中（IE6以及以下），就不支持XMLHttpRequest, 需要使用ActiveXobject() 来创建异步对象

        支持 XMLHttpRequest: new XMLHttpRequest()
        不支持 XMLHttpRequest: new ActiveXObject('Microsoft.XMLHTTP')

3. xhr的成员
    1. 方法 - open()
        作用： 创建请求
        语法： open(method, url, async)
            method: 请求方法，取值为'get' 或 'post'
            url: 请求地址，字符串
            async: 是否采用异步的方式发送请求
                true： 异步
                false: 同步
        ex:
            xhr.open('get', ‘/server/’, true)

    2. 属性 - readyState
        作用： 请求的状态，通过不同的请求状态值来表示xhr与服务器的交互情况
        由0-4共五个值来表示5个不同的状态
        0     请求尚未初始化
        1     xhr已经与服务器建立链接
        2     服务器已经开始接收请求
        3     请求正在处理中
        4     响应已完成（重要）

    3. 属性 - status
        作用： 服务器端的响应状态码
          200： 表示服务器正确处理所有的请求以及给出响应
          404： 表示请求资源不存在
          500： 服务器内部错误

    4. 属性 - responseText
        作用： 服务器的响应数据

    5. 事件 - onreadystatechange
        作用： 每当xhr的readyState 属性值发生改变时要触发的操作 - 回调函数
          在该函数中，只有当readyState 的值为4, 并且status的值为200的时候，
          就可以正常的接收 responseText 了

    6. 方法 - send()
        作用： 通知xhr向服务器端发送请求
        语法： send(body)
          body: 表示请求的主体
          get请求： 是没有请求主体的，所有body的值为null
                    xhr.send(null)
          post请求： 是有请求主体的，所有body的位置处要表示请求数据
                    xhr.send('请求数据')
                    xhr.send('参数=值&参数=值')


4. AJAX的操作步骤
    1. GET请求
       1. 创建xhr对象
       2. 创建请求 - open()
       3. 设置回调函数 - onreadystatechange
          判断状态并且接收数据
       4. 发送请求 - send()


get请求传递参数
    // 1. 获取xhr
    // 2. 创建请求
        xhr.open('get', '/url?name=xx&age=xx/', async=true)
    // 3. 设置回调函数
    // 4. 发送请求

   服务器端
        使用 request.args.get(arg)  接收请求参数

POST 请求
    1. 请求提交的数据要作为send()方法的参数进行提交
        xhr.send('参数=值&参数=值');
        Content-Type:application/x-www-form-urlencoded
    2. 修改请求消息头
      在AJAX中，提交post请求时，AJAX默认将Content-Type 请求消息头的值修改为text/plain了，
     所以导致数据无法提交
     解决方案： 将Content-Type 的请求消息头再修改回“application/x-www-form-urlencoded”即可


练习
    1. 创建数据库ajax
    2. 创建模型 -User
        id 主键， 自增
        username 登录名称
        password 登录密码
        name 用户名称


=====================================
JSON
    语法
        1. 通过一对{} 表示一个对象
        2. 在{}中允许通过key:value 的形式表示属性
        3. 多对的属性和值之间使用',' 隔开

    什么是JSON
        JavaScript Object Notation
                            表现形式
        按照js对象的格式所构建出来的字符串就是json
        在AJAX中允许将复杂格式的响应数据（如列表等构建成json格式的字符串，再进行响应输出）

    JSON的表现
        1. JSON表示单个对象
            使用{}表示单个对象
            在{}中使用key:value的格式表示数据
            多对属性和值之间使用 , 隔开
            key必须使用""引起来
            value如果是字符串的话，也需要用""引起来
            ex:
               var obj = {
                   "name": "MrWang",
                   "age"： 37,
                   "gender": "Unknown"
               }

               var str = '{"name": "MrWang", "age": 37, "gender":"Unknown"}'

        2. JSON表示多个对象
            1. 使用[](数组)来表示多个对象
            2. 数组中允许包含多个JSON对象 或 字符串
                1. 使用JSON数组来表示若干字符串
                    var arr = ["王老师", "王夫人", "王小超"];
                    var str = '["王老师", "王夫人", "王小超"]'
                2. 使用JSON数组来表示若干对象
                    var arr = [
                        {
                            "name":"王老师",
                            "age": 37,
                            "gender": "男"
                        },
                        {
                            "name": "王夫人",
                            "age": 15,
                            "gender": "男",
                        }
                    ];

    使用JQuery的each()迭代数组
        1. $.each()
          语法： $.each(arr, function(index, obj){
                // index: 遍历的元素的下标
                // obj: 遍历出来的元素
            });

        2. $obj.each();
          语法
            $obj.each(function(index, obj){

            });


    后台处理json
        在后台查询数据时，需要将数据转换为json格式的字符串，再响应给客户端
      到了前端后再将字符串转换为js对象进行解析
        1. 后台先获取数据，
            允许转换的数据类型：元组，列表，字典
        2. 在后台将数据转换为符合json格式的字符串
        3. 在后台将json格式字符串进行响应


    python 中的json处理
        使用 python中的json类可以完成转换
        import json
        json_str = json.dumps(元组|列表|字典)


    前端中的json处理
        通过以下方式，将json的串转换为JS对象，或数组
        在js中，JSON.parse(JSON串)



===================
1. JQuery AJAX
  $obj.load(url, data, callback)
    作用： 异步加载数据到$obj元素中
    参数：
        url： 异步请求的地址
        data： 传输给服务器的参数
            该数据决定了请求方式是什么
            1. 可以传递普通的字符串
                "name=MrWang&age=30"
            2. 可以是JSON对象
                {
                    "name": "MrWang",
                    "age": 30
                }
        callback:
            请求响应成功后的回调函数（匿名函数）
            function(resText, statusText){
                resText: 响应数据
                statusText: 响应的状态文本
            }
2. $.get()
    语法：
        $.get(url, data, callback, type);
    参数
        url： 异步请求的地址
        data: 异步请求的参数
            1. 字符串： name=xxx&age=xxx
            2. JSON： {"name":"xxx", "name":"xxx"}
        callback: 请求成功时的回调函数
            function(resText){
                resText: 表示响应后的响应数据
            }
        type: 响应回来的数据的类型
            html: 响应回来的数据是html文本
            text： 响应回来的数据是text文本
            json： 响应回来的数据是json对象
            script： 响应回来的数据是js脚本代码
            注意:
                如果此处指定了数据类型的话，在callback中就无需再做类型的转换

3. $.post()
    用法和$.get类似

4. $.ajax()
    作用
        自定义所有的ajax的行为
    语法
        $.ajax( {ajax设置的参数数据对象} );
    参数
        url: 字符串，表示异步请求的地址
        type: 字符串，表示请求方式
        data: 传递到服务器的参素
            1. 字符串： "name=xxx&age=xxx"
            2. JSON对象： {"name": "value"}
        dataType: 字符串，响应回来的数据的格式
            1. html
            2. xml
            3. text
            4. script
            5. json
            6. jsonp  有关跨域的响应格式
        success: 回调函数，请求和响应称的回调函数
            function(data){
                data: 表示服务器响应回来的数据
            }
        error:  回调函数，请求或响应失败时的回调函数
        beforeSend: 回调函数，在发送ajax请求之前的回调函数，
            如果return false的话则表示终止本次请求















